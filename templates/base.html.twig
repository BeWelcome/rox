{% import 'macros.twig' as macros %}
<!DOCTYPE html>
<html lang="{{ app.request.locale }}">
  <head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="shortcut icon" href="{{ asset('favicon.ico') }}">
    <link rel="icon" type="image/x-icon" href="{{ asset('favicon.ico') }}" />

    <title>
      {% apply spaceless %}
        {% if block('title') is defined %}
          {{ block('title') | trim }} |
        {% endif %} BeWelcome
      {% endapply %}
    </title>

    <meta name="description" content="{{ 'default_meta_description' | trans }}">
    <meta name="keywords" content="{{ 'default_meta_keyword' | trans }}">
    <meta name="robots" content="{{ robots }}">
    {% block redirect %}{% endblock %}

      {{ encore_entry_link_tags('bewelcome') }}
      {{ encore_entry_link_tags('tailwind') }}

    {% block stylesheets %}{% endblock %}
    <link rel="icon" type="image/x-icon" href="{{ asset('favicon.ico') }}" />
    {% block matomo %}{% endblock %}
    <base id="baseuri" href="{{ app.request.schemeAndHttpHost ~ app.request.baseUrl }}">

    <link rel="manifest" href="{{ asset('manifest.webmanifest') }}">
    <script>
      // Check that service workers are supported
      if ('serviceWorker' in navigator) {
        // Use the window load event to keep the page load performant
        window.addEventListener('load', () => {
          navigator.serviceWorker.register('{{ asset('service-worker.js') }}');
        });
      }
    </script>
  </head>
  <body>
    {% include 'menu.html.twig' %}
    <main role="main">
      <div id="toasts" class="position-fixed w-100 d-flex flex-column px-2" style="z-index:1000">
      </div>
      {% set sidebar = (submenu is defined) %}
      {% set contentBlock %}
        {% for label, messages in app.flashes %}
          <div class="row">
            {% for message in messages %}
              <div class="col-12">
                <div class="alert alert-{{ label }}">
                  {{ message | raw }}
                </div>
              </div>
            {% endfor %}
          </div>
        {% endfor %}
        {% block content %}{% endblock %}
      {% endset %}
      <div class="container-lg">
        {% if sidebar %}
          <div class="row mt-2">
            <div class="col-12 col-md-9">
              <p class="float-right d-md-none">
                <button type="button" class="btn btn-primary btn-sm ml-3" data-toggle="offcanvas"><span class="navbar-dark navbar-toggler-icon"></span></button>
              </p>
              {{  contentBlock | raw }}
            </div>
            <div class="col-md-3 offcanvas-collapse mb-2" id="sidebar">
              <div class="w-100 p-1 text-right d-md-none">
                <button type="button" class="btn btn-sm" aria-label="Close" data-toggle="offcanvas">
                  <i class="fa fa-lg fa-times white" aria-hidden="true"></i>
                </button>
              </div>
              <div class="list-group mb-2">
                {% for filter,menuItem in submenu.items %}
                {% if (filter is same as ('separator') or filter is same as ('separator2')) %}
                  </div><h3 class="mt-3 h3-canvas-color">{{ menuItem.key | lower | trans }}</h3><div class="list-group mb-2">
                {% else %}
                  <a class="list-group-item nav-link{% if submenu.active == filter %} active{% endif %}"
                     href="{{ menuItem.url }}">{{ menuItem.key | lower | trans }}</a>
                {% endif %}
                {% endfor %}
              </div>
            </div>
          </div>
        {% else %}
          {{  contentBlock | raw }}
        {% endif %}
      </div>
    </main>
    {% include 'footer.html.twig' %}
      {{ encore_entry_script_tags('bewelcome') }}
      {{ encore_entry_script_tags('updatecounters') }}
      {% if sidebar %}
        {{ encore_entry_script_tags('offcanvas') }}
      {% endif %}
      <script type="application/javascript">
        $(".select2").select2({
          theme: 'bootstrap4',
          width: 'auto',
          dropdownAutoWidth: true
        });
        $(".toast").toast('show');

      </script>
        <script type="application/javascript">
            $('[data-toggle="dropdown"]').bootstrapDropdownHover({
                clickBehavior: 'sticky',
                hideTimeout: 1000
            });

            $(function () {
                registerOnClickEvent();
            });

            // ------------------------------------------------------- //
            // Multi Level dropdowns
            // ------------------------------------------------------ //
            function registerOnClickEvent() {
                $("ul.dropdown-menu [data-toggle='dropdown']").on("click", function (event) {
                    console.log('clicked', event);

                    $(this).siblings().toggleClass("show");

                    if (!$(this).next().hasClass('show')) {
                        $(this).parents('.dropdown-menu').first().find('.show').removeClass("show");
                    }
                    $(this).parents('li.nav-item.dropdown.show').on('hidden.bs.dropdown', function (e) {
                        $('.dropdown-submenu .show').removeClass("show");
                    });

                });

            }

            const gapSize = 20;

            var autocollapse_menu = function (resizing) {
                const hamburger = document.getElementById('hamburger');
                const hamburgerMenu = document.getElementById('hamburger_menu');
                const staticMenu = document.getElementById('static_menu');
                const collapsingMenu = document.getElementById('collapsing_menu');

                // if resizing move all menu items back into the collapsing menu and start from there
                // This also takes care of vanishing elements due to smaller viewports (like username and text on logo)
                let hiddenItems = hamburgerMenu.childNodes;
                if (hiddenItems.length !== 0) {
                    for (let i = 0; i < hiddenItems.length; i++) {
                        const menuItemToMove = hiddenItems[i];
                        menuItemToMove.classList.remove('dropdown-submenu');
                        menuItemToMove.classList.add('dropdown');

                        collapsingMenu.appendChild(menuItemToMove);
                    }
                }

                let dimensionsStatic = staticMenu.getBoundingClientRect();
                let dimensionsCollapse = collapsingMenu.getBoundingClientRect();

                if (dimensionsStatic.left - dimensionsCollapse.right < gapSize) {
                    hamburger.classList.remove('d-none');

                    while (dimensionsStatic.left - dimensionsCollapse.right < gapSize) {
                        //  add child to dropdown
                        const menuItems = document.querySelectorAll('#collapsing_menu > li:not(:first-child)');
                        const count = menuItems.length;
                        const menuItemToMove = menuItems[count - 1];
                        menuItemToMove.classList.remove('dropdown');
                        menuItemToMove.classList.add('dropdown-submenu');
                        menuItemToMove.classList.add('dropdown-menu-right');

                        // insert in front of the first item in the hamburger menu
                        hamburgerMenu.insertBefore(menuItemToMove, hamburgerMenu.firstChild);

                        dimensionsStatic = staticMenu.getBoundingClientRect();
                        dimensionsCollapse = collapsingMenu.getBoundingClientRect();
                    }
                } else {
                    hiddenItems = hamburgerMenu.childNodes;

                    if (hiddenItems.length === 0) {
                        hamburger.classList.add('d-none');
                    }

                    while (dimensionsStatic.left - dimensionsCollapse.right >= gapSize && hiddenItems.length !== 0) {
                        const menuItems = hamburgerMenu.childNodes;
                        const menuItemToMove = menuItems[0];
                        menuItemToMove.classList.remove('dropdown-submenu');
                        menuItemToMove.classList.remove('dropdown-menu-right');
                        menuItemToMove.classList.add('dropdown');

                        collapsingMenu.appendChild(menuItems[0]);

                        dimensionsStatic = staticMenu.getBoundingClientRect();
                        dimensionsCollapse = collapsingMenu.getBoundingClientRect();

                        hiddenItems = document.querySelectorAll('#hamburger_menu > li');
                    }

                    if (dimensionsStatic.left - dimensionsCollapse.right < gapSize) {
                        console.log('Smaller: Autocollapse');
                        autocollapse_menu();
                    }
                }
                registerOnClickEvent();
            }

            $(document).ready(function () {
                // when the page has loaded
                autocollapse_menu(false);

                // when the window is resized
                $(window).on('resize', function () {
                    autocollapse_menu(true);
                });
            });
        </script>
    {% block javascripts %}{% endblock javascripts %}
  </body>
</html>
