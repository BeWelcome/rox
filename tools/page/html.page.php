<?php


class PageWithHTML extends AbstractBasePage
{
    private $_widgets = array();  // will be asked for stylesheet and scriptfile information

    // Add or increment query string if a JS file changes to make sure browsers
    // reload the file (e.g. "?1" -> "?2")
    private $_early_scriptfiles = array(
        'script/main.js?4',
        'script/common.js?1',
    );

    private $_late_scriptfiles = array();

    public function render() {
        $this->init();
        header('Content-type: text/html;charset="utf-8"');
        $this->printHTML();
        PVars::getObj('page')->output_done = true;
    }
    
    protected function init() {
        // by default, nothing happens.
        // the idea of this function is to set some values,
        // such as page title, meta keyword, meta description
    }

    /**
     * skeleton method of getCustomElements
     *
     * @access protected
     * @return array
     */
    protected function getCustomElements()
    {
        return array();
    }
    
    /**
     * don't forget to call
     * $stylesheets = parent::$this->getStylesheets();
     * when reimplementing this method!!
     */
    protected function getStylesheets()
    {
        $stylesheets = array();
        foreach ($this->_widgets as $widget) {
            foreach ($widget->getStylesheets() as $stylesheet) {
                $stylesheets[] = $stylesheet;
            }
        }
        return $stylesheets;
    }
    
    protected function getStylesheetPatches()
    {
        $stylesheet_patches = array();
        foreach ($this->_widgets as $widget) {
            foreach ($widget->getStylesheets() as $stylesheet_patches) {
                $stylesheet_patches[] = $stylesheet_patches;
            }
        }
        return $stylesheet_patches;
    }

    /**
     * returns all registered early load scripts
     * these are the scripts to be loaded in the html head element
     *
     * @access protected
     * @return array
     */
    protected function getScriptfiles()
    {
        $scriptfiles = $this->_early_scriptfiles;
        foreach ($this->_widgets as $widget) {
            foreach ($widget->getScriptfiles() as $scriptfile) {
                $scriptfiles[] = $scriptfile;
            }
        }
        return array_unique($scriptfiles);
    }

    /**
     * returns all registered late load scripts
     * these are the scripts to be loaded at the end of the page
     *
     * @access protected
     * @return array
     */
    protected function getLateLoadScriptfiles()
    {
        return array_diff(array_unique($this->_late_scriptfiles), $this->_early_scriptfiles);
    }

    /**
     * registers a script for early loading
     *
     * @param string $file - js file to early load
     *
     * @access protected
     * @return void
     */
    protected function addEarlyLoadScriptFile($file)
    {
        $this->_early_scriptfiles[] = 'script/' . $file;
    }

    /**
     * registers a script for late loading
     *
     * @param string $file - js file to early load
     *
     * @access protected
     * @return void
     */
    protected function addLateLoadScriptFile($file)
    {
        $this->_late_scriptfiles[] = 'script/' . $file;
    }

    protected function getPageTitle() {
        return 'BeWelcome';
    }
    
    
    /**
     * Widgets added this way will be asked
     * for stylesheet and scriptfile information
     * TODO: evtl not a good idea to do it this way.
     *
     * @param RoxWidget $widget
     */
    public function addWidget(RoxWidget $widget)
    {
        $this->_widgets[] = $widget;
    }
    
    
    protected function printHTML()
    {
        
        ?><!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="<?=PVars::get()->lang; ?>" lang="<?=PVars::get()->lang; ?>" xmlns:v="urn:schemas-microsoft-com:vml">
        <head>
        <link rel="shortcut icon" href="<?php echo PVars::getObj("env")->baseuri ?>favicon.ico" />

        <!-- this page is generated by "class <?=get_class($this) ?>" -->
        <!-- the controller was an instance of <?=(is_string($this->controller_classname) ? ('"class '.$this->controller_classname.'"') : '[unknown class]') ?> -->
        <?=(is_object($this->layoutkit) && is_object($this->layoutkit->mem_from_redirect) ? '
        <!--
        '.$this->layoutkit->mem_from_redirect->buffered_text.'
        -->' : '') ?>
        
        
        
        <?php
        
        $this->head();
        $this->includeJsConfig();
        $this->includeScriptfiles();
        ?>
        </head>
        <body>
        <?php
        
        echo (is_object($this->layoutkit) && (is_object($this->layoutkit->mem_from_redirect))) ? $this->layoutkit->mem_from_redirect->buffered_text : '';
        
        
        $this->body();
        
        $this->includeLateScriptfiles();
        ?>
        </body>
        </html><?php
    }
    
    
    protected function includeStylesheets()
    {
        if (!$stylesheets = $this->getStylesheets()) {
            // no stylesheets
        } else foreach($stylesheets as $url) {
            ?><link rel="stylesheet" href="<?=$url ?>" type="text/css" />
            <?php
        }
        if (!$stylesheet_patches = $this->getStylesheetPatches()) {
            // no stylesheets
        } else foreach($stylesheet_patches as $url) {
            ?>
    <!--[if lte IE 7]>
                    <link rel="stylesheet" href="<?=$url ?>" type="text/css" />
        <![endif]-->
            <?php
        }
    }

    /**
     * allows for outputting custom elements in the page <head> element
     *
     * @access protected
     */
    protected function includeCustomElements()
    {
        if ($elements = $this->getCustomElements())
        {
            foreach($elements as $element)
            {
                echo $element . PHP_EOL;
            }
        }
    }

    /**
     * Inserts JavaScript configuration.
     *
     * Reads [javascript] section in rox.ini and makes it available via
     * bwroxConfig object in JavaScript.
     */
    protected function includeJsConfig()
    {
        $config = PVars::getArray('javascript');
        if ($config) {
            $html = array();
            $pairs = array();
            $html[] = '<script type="text/javascript">';
            $html[] = 'var bwroxConfig = {';
            foreach($config as $key => $value) {
                $pairs[] = $key . ": '" . $value . "'";
            }
            $html[] = implode($pairs, ',');
            $html[] = '}';
            $html[] = '</script>';
            echo implode($html, "\n");
        }
    }

    protected function includeScriptfiles()
    {
        ?>

        <?php
        if (!$scriptfiles = $this->getScriptfiles()) {
            // no stylesheets
        } else foreach($scriptfiles as $url) {
            ?><script type="text/javascript" src="<?=$url ?>"></script>
            <?php
        }
    }

    /**
     * outputs script tags that include script files
     * called at the end of pages
     *
     * @access protected
     * @return void
     */
    protected function includeLateScriptfiles()
    {
        if ($scriptfiles = $this->getLateLoadScriptfiles())
        {
            foreach($scriptfiles as $url)
            {
                echo "<script type='text/javascript' src='{$url}'></script>";
            }
        }
    }
    
    protected function head()
    {
        if (isset($_SERVER['HTTPS']) && PVars::getObj('env')->baseuri_https !== false) {
            $baseuri = PVars::getObj('env')->baseuri_https;
        } else {
            $baseuri = PVars::getObj('env')->baseuri;
        }
        ?>
        <title><?= htmlspecialchars($this->getPageTitle(), ENT_QUOTES) ?></title>
        <base id="baseuri" href='<?=$baseuri ?>' />
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
        <meta name="verify-v1" content="NzxSlKbYK+CRnCfULeWj0RaPCGNIuPqq10oUpGAEyWw=" />
        <meta name="description" content="<?=$this->getPage_meta_description()?>" />
        <meta name="keywords" content="<?=$this->getPage_meta_keyword()?>" />
        <meta name="robots" content="<?=$this->getPage_meta_robots()?>" />        
        <?php
        $this->includeStylesheets();
        $this->includeCustomElements();
        $this->_tr_buffer_header = $this->getWords()->flushBuffer();
    }
    
    protected function getPagePermalink() {
        return 'index';
    }
    
    protected function statusMessage() 
    {
        $words = new MOD_words();
        // messages about the member's status preceed the info messages
        $logged_in = APP_User::IsBWLoggedIn("NeedMore,Pending");
        if ($logged_in && $_SESSION['Status'] != 'Active') echo '<p class="status note big">'.$words->get('StatusMessage_'.$_SESSION['Status']).'</p>';
        
        // infoMessage should be used by other Pages to show post-form-messages and other status-messages to the member
        $class = (isset($this->infoMessageClass) && $this->infoMessageClass != '') ? $this->infoMessageClass : '';
        if (isset($this->infoMessage) && $this->infoMessage != '') echo '<p class="note big '.$class.'">'.$this->infoMessage.'</p>';
    }
}
